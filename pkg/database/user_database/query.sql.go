// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package user_database

import (
	"context"
	"database/sql"
)

const getUser = `-- name: GetUser :one
SELECT id, username, name, sex, age, hash_pass, email, image_path, created_timestamp FROM user_table WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (UserTable, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i UserTable
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Sex,
		&i.Age,
		&i.HashPass,
		&i.Email,
		&i.ImagePath,
		&i.CreatedTimestamp,
	)
	return i, err
}

const getUserbyEmail = `-- name: GetUserbyEmail :one
SELECT id, username, name, sex, age, hash_pass, email, image_path, created_timestamp FROM user_table WHERE email = $1
`

func (q *Queries) GetUserbyEmail(ctx context.Context, email string) (UserTable, error) {
	row := q.db.QueryRowContext(ctx, getUserbyEmail, email)
	var i UserTable
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Sex,
		&i.Age,
		&i.HashPass,
		&i.Email,
		&i.ImagePath,
		&i.CreatedTimestamp,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO user_table (username, name, sex, age, hash_pass, email)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, username, name, sex, age, hash_pass, email, image_path
`

type InsertUserParams struct {
	Username string
	Name     string
	Sex      string
	Age      int32
	HashPass string
	Email    string
}

type InsertUserRow struct {
	ID        int32
	Username  string
	Name      string
	Sex       string
	Age       int32
	HashPass  string
	Email     string
	ImagePath sql.NullString
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Username,
		arg.Name,
		arg.Sex,
		arg.Age,
		arg.HashPass,
		arg.Email,
	)
	var i InsertUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Sex,
		&i.Age,
		&i.HashPass,
		&i.Email,
		&i.ImagePath,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, name, sex, age, hash_pass, email, image_path, created_timestamp FROM user_table
`

func (q *Queries) ListUsers(ctx context.Context) ([]UserTable, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserTable
	for rows.Next() {
		var i UserTable
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Sex,
			&i.Age,
			&i.HashPass,
			&i.Email,
			&i.ImagePath,
			&i.CreatedTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
