// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package user_database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getUser = `-- name: GetUser :one
SELECT id, email, password_hash, display_name, avatar_url, bio, created_at, updated_at, sex, age
FROM users
WHERE id = $1
`

type GetUserRow struct {
	ID           uuid.UUID
	Email        string
	PasswordHash string
	DisplayName  string
	AvatarUrl    *string
	Bio          *string
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Sex          sql.NullString
	Age          sql.NullInt32
}

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Sex,
		&i.Age,
	)
	return i, err
}

const getUserbyEmail = `-- name: GetUserbyEmail :one
SELECT id, email, password_hash, display_name, avatar_url, bio, created_at, updated_at, sex, age, avatar_data FROM users WHERE email = $1
`

func (q *Queries) GetUserbyEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserbyEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Sex,
		&i.Age,
		&i.AvatarData,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (email, password_hash, display_name, avatar_url, bio, sex, age)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, email, password_hash, display_name, avatar_url, bio, created_at, updated_at, sex, age
`

type InsertUserParams struct {
	Email        string
	PasswordHash string
	DisplayName  string
	AvatarUrl    *string
	Bio          *string
	Sex          sql.NullString
	Age          sql.NullInt32
}

type InsertUserRow struct {
	ID           uuid.UUID
	Email        string
	PasswordHash string
	DisplayName  string
	AvatarUrl    *string
	Bio          *string
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Sex          sql.NullString
	Age          sql.NullInt32
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Email,
		arg.PasswordHash,
		arg.DisplayName,
		arg.AvatarUrl,
		arg.Bio,
		arg.Sex,
		arg.Age,
	)
	var i InsertUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Sex,
		&i.Age,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password_hash, display_name, avatar_url, bio, created_at, updated_at, sex, age
FROM users
`

type ListUsersRow struct {
	ID           uuid.UUID
	Email        string
	PasswordHash string
	DisplayName  string
	AvatarUrl    *string
	Bio          *string
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Sex          sql.NullString
	Age          sql.NullInt32
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.DisplayName,
			&i.AvatarUrl,
			&i.Bio,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Sex,
			&i.Age,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAvatarData = `-- name: UpdateUserAvatarData :one
UPDATE users
SET 
    avatar_data = $1,
    updated_at = CURRENT_TIMESTAMP
WHERE email = $2
RETURNING id, email, password_hash, display_name, avatar_url, bio, created_at, updated_at, sex, age, avatar_data
`

type UpdateUserAvatarDataParams struct {
	AvatarData []byte
	Email      string
}

func (q *Queries) UpdateUserAvatarData(ctx context.Context, arg UpdateUserAvatarDataParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserAvatarData, arg.AvatarData, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Sex,
		&i.Age,
		&i.AvatarData,
	)
	return i, err
}

const updateUserAvatarURL = `-- name: UpdateUserAvatarURL :one
UPDATE users
SET 
    avatar_url = $1,
    updated_at = CURRENT_TIMESTAMP
WHERE email = $2
RETURNING id, email, password_hash, display_name, avatar_url, bio, created_at, updated_at, sex, age
`

type UpdateUserAvatarURLParams struct {
	AvatarUrl *string
	Email     string
}

type UpdateUserAvatarURLRow struct {
	ID           uuid.UUID
	Email        string
	PasswordHash string
	DisplayName  string
	AvatarUrl    *string
	Bio          *string
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Sex          sql.NullString
	Age          sql.NullInt32
}

func (q *Queries) UpdateUserAvatarURL(ctx context.Context, arg UpdateUserAvatarURLParams) (UpdateUserAvatarURLRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserAvatarURL, arg.AvatarUrl, arg.Email)
	var i UpdateUserAvatarURLRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Sex,
		&i.Age,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users 
SET 
    display_name = COALESCE($1, display_name),
    avatar_url = COALESCE($2, avatar_url),
    bio = COALESCE($3, bio),
    sex = COALESCE($4, sex),
    age = COALESCE($5, age),
    updated_at = CURRENT_TIMESTAMP
WHERE email = $6
RETURNING id, email, password_hash, display_name, avatar_url, bio, created_at, updated_at, sex, age
`

type UpdateUserProfileParams struct {
	DisplayName string
	AvatarUrl   *string
	Bio         *string
	Sex         sql.NullString
	Age         sql.NullInt32
	Email       string
}

type UpdateUserProfileRow struct {
	ID           uuid.UUID
	Email        string
	PasswordHash string
	DisplayName  string
	AvatarUrl    *string
	Bio          *string
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Sex          sql.NullString
	Age          sql.NullInt32
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UpdateUserProfileRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserProfile,
		arg.DisplayName,
		arg.AvatarUrl,
		arg.Bio,
		arg.Sex,
		arg.Age,
		arg.Email,
	)
	var i UpdateUserProfileRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Sex,
		&i.Age,
	)
	return i, err
}
