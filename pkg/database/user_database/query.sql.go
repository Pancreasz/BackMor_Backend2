// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package user_database

import (
	"context"
)

const getUser = `-- name: GetUser :one
SELECT id, name, sex FROM user_table WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (UserTable, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i UserTable
	err := row.Scan(&i.ID, &i.Name, &i.Sex)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO user_table (name, sex)
VALUES ($1, $2)
RETURNING id, name, sex
`

type InsertUserParams struct {
	Name string
	Sex  string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (UserTable, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.Name, arg.Sex)
	var i UserTable
	err := row.Scan(&i.ID, &i.Name, &i.Sex)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, sex FROM user_table
`

func (q *Queries) ListUsers(ctx context.Context) ([]UserTable, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserTable
	for rows.Next() {
		var i UserTable
		if err := rows.Scan(&i.ID, &i.Name, &i.Sex); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
