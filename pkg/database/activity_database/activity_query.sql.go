// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activity_query.sql

package activity_database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addActivityMember = `-- name: AddActivityMember :one
INSERT INTO activity_members (activity_id, user_id, role, joined_at)
VALUES ($1, $2, $3, NOW())
RETURNING activity_id, user_id, role, joined_at
`

type AddActivityMemberParams struct {
	ActivityID uuid.UUID
	UserID     uuid.UUID
	Role       string
}

func (q *Queries) AddActivityMember(ctx context.Context, arg AddActivityMemberParams) (ActivityMember, error) {
	row := q.db.QueryRowContext(ctx, addActivityMember, arg.ActivityID, arg.UserID, arg.Role)
	var i ActivityMember
	err := row.Scan(
		&i.ActivityID,
		&i.UserID,
		&i.Role,
		&i.JoinedAt,
	)
	return i, err
}

const deleteActivity = `-- name: DeleteActivity :exec
DELETE FROM activities
WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteActivity, id)
	return err
}

const deleteActivityMember = `-- name: DeleteActivityMember :exec
DELETE FROM activity_members
WHERE activity_id = $1 AND user_id = $2
`

type DeleteActivityMemberParams struct {
	ActivityID uuid.UUID
	UserID     uuid.UUID
}

func (q *Queries) DeleteActivityMember(ctx context.Context, arg DeleteActivityMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteActivityMember, arg.ActivityID, arg.UserID)
	return err
}

const getActivityByID = `-- name: GetActivityByID :one
SELECT id, creator_id, title, description, start_time, end_time, max_participants, visibility, latitude, longitude, location, created_at, updated_at
FROM activities
WHERE id = $1
`

func (q *Queries) GetActivityByID(ctx context.Context, id uuid.UUID) (Activity, error) {
	row := q.db.QueryRowContext(ctx, getActivityByID, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.MaxParticipants,
		&i.Visibility,
		&i.Latitude,
		&i.Longitude,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertActivity = `-- name: InsertActivity :one
INSERT INTO activities (
    creator_id,
    title,
    description,
    start_time,
    end_time,
    max_participants,
    visibility,
    latitude,
    longitude,
    location
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, creator_id, title, description, start_time, end_time, max_participants, visibility, latitude, longitude, location, created_at, updated_at
`

type InsertActivityParams struct {
	CreatorID       uuid.UUID
	Title           string
	Description     *string
	StartTime       time.Time
	EndTime         *time.Time
	MaxParticipants *int32
	Visibility      string
	Latitude        float64
	Longitude       float64
	Location        *string
}

func (q *Queries) InsertActivity(ctx context.Context, arg InsertActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, insertActivity,
		arg.CreatorID,
		arg.Title,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.MaxParticipants,
		arg.Visibility,
		arg.Latitude,
		arg.Longitude,
		arg.Location,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.MaxParticipants,
		&i.Visibility,
		&i.Latitude,
		&i.Longitude,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActivities = `-- name: ListActivities :many
SELECT id, creator_id, title, description, start_time, end_time, max_participants, visibility, latitude, longitude, location, created_at, updated_at FROM activities
`

func (q *Queries) ListActivities(ctx context.Context) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, listActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Title,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.MaxParticipants,
			&i.Visibility,
			&i.Latitude,
			&i.Longitude,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActivitiesByUser = `-- name: ListActivitiesByUser :many
SELECT a.id, a.creator_id, a.title, a.description, a.start_time, a.end_time, a.max_participants, a.visibility, a.latitude, a.longitude, a.location, a.created_at, a.updated_at
FROM activities a
JOIN activity_members am ON a.id = am.activity_id
WHERE am.user_id = $1
ORDER BY a.start_time
`

func (q *Queries) ListActivitiesByUser(ctx context.Context, userID uuid.UUID) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, listActivitiesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Title,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.MaxParticipants,
			&i.Visibility,
			&i.Latitude,
			&i.Longitude,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActivityMembers = `-- name: ListActivityMembers :many
SELECT
  am.user_id,
  u.display_name,
  am.role,
  am.joined_at
FROM activity_members am
JOIN users u ON u.id = am.user_id
WHERE am.activity_id = $1
ORDER BY am.joined_at ASC
`

type ListActivityMembersRow struct {
	UserID      uuid.UUID
	DisplayName string
	Role        string
	JoinedAt    time.Time
}

func (q *Queries) ListActivityMembers(ctx context.Context, activityID uuid.UUID) ([]ListActivityMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, listActivityMembers, activityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListActivityMembersRow
	for rows.Next() {
		var i ListActivityMembersRow
		if err := rows.Scan(
			&i.UserID,
			&i.DisplayName,
			&i.Role,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
